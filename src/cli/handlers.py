import os
from loguru import logger
from src.core.pipeline import VideoAnalysisPipeline
#from src.core.video_utils import get_video_metadata # Example utility
from src.utils.file_system import ensure_dir_exists

def handle_video_analysis(args):
    """Handle the video analysis command."""
    logger.info(f"Starting analysis for video: {args.video}")

    if not os.path.exists(args.video):
        logger.error(f"Video file not found: {args.video}")
        raise FileNotFoundError(f"Video file not found: {args.video}")

    ensure_dir_exists(args.output_dir)

    # Initialize AI model handlers (they should load models internally)
    # This is where you'd pass model paths from config if not hardcoded in handlers
    # e.g., yolo = YOLOModel(settings.YOLO_MODEL_PATH)

    # Initialize the pipeline
    pipeline = VideoAnalysisPipeline(
        video_path=args.video,
        transcription_language=args.transcription_language,
        summarization_model="gemma3", 
        perform_object_detection=not args.skip_object_detection,
        perform_scene_description=not args.skip_scene_description,
        perform_transcription=True,
        perform_audio_events=True,
        perform_summarization=True
    )

    # Run the analysis
    results = pipeline.run_analysis()

    # Handle outputs
    if args.save_report and results.get("text_report"):
        report_path = os.path.join(args.output_dir, f"{os.path.basename(args.video)}_report.txt")
        logger.debug(f"Saving text report to: {report_path}")
        with open(report_path, "w", encoding="utf-8") as f:
            f.write(results["text_report"])
        logger.info(f"Text report saved to: {report_path}")

    if args.save_annotated_video and results.get("annotated_video_path"):
        # Logic to move or confirm saved annotated video
        logger.info(f"Annotated video available at: {results['annotated_video_path']}")
    elif args.save_annotated_video:
        logger.warning("Annotated video was requested but not generated by the pipeline.")

    # You might want to print a summary to console as well
    print("\n--- Analysis Summary ---")
    
    if results is None:
        print("No results were generated from the analysis.")
        return
        
    if results.get("summary"):
        print(f"AI Generated Summary:\n{results['summary']}\n")
    
    if results.get("transcription"):
        transcription = results["transcription"]
        preview = transcription[:100] if transcription else ""
        print(f"Transcription Preview (first 100 chars):\n{preview}...\n")
    
    # Add error handling for missing results
    if not any(key in results for key in ["summary", "transcription"]):
        print("No summary or transcription data available in results.")